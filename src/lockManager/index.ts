import fs from "fs-extra";
import path from "path";
import parsedDependencies from "../parsedDepedencies";

interface IDependencies {
  [key: string]: string;
}

interface IGenerate {
  name?: string;
  version?: string;
  resolved?: string;
  integrity?: string;
  dependencies?: IDependencies;
}

class lockManager {
  save(lock: string, data: IGenerate[]) {
    fs.writeFileSync(lock, this.generate(data));
  }

  parse(data: string) {
    var text: string | string[] = data
      .replaceAll(
        "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# bunc lockfile v1\n",
        ""
      )
      .replaceAll(" ", '":')
      .replaceAll(':":', '":')
      .replaceAll('""', '"')
      .replaceAll("\n\n\n", '},{"name":')
      .replaceAll(":\n", ":")
      .replaceAll("\t", "")
      .replaceAll("\n", ",")
      .replaceAll(",", ',"')
      .replaceAll(',"{', ",{")
      .replaceAll('""', '"')
      .replaceAll("}}}", "}}");

    if (text == '},{"name":') {
      return [];
    }

    text = text.substring(0, text.length - 9);
    text = `[{"name":${text}]`;

    return JSON.parse(text);
  }

  add(packageData: IGenerate, currentWorkingDirectory: string) {
    const resolvedLockPath = path.resolve(currentWorkingDirectory, "bunc.lock");

    if (fs.existsSync(resolvedLockPath)) {
      const lockContent = this.get(currentWorkingDirectory);
      lockContent.push(packageData)

      const newLockContent = this.generate(lockContent);

      return newLockContent;
    }

    const newLockContent = this.generate([packageData]);

    return newLockContent;
  }

  remove(packageData: IGenerate, currentWorkingDirectory: string) {
    const lockData = this.get(currentWorkingDirectory);

    for (let packageIndex in lockData) {
      const packageData = lockData[packageIndex];

      if (packageData.name == packageData.name) {
        delete lockData[packageIndex];
      }
    }

    return lockData;
  }

  get(currentWorkingDirectory: string) {
    const resolvedLockPath = path.resolve(currentWorkingDirectory, "bunc.lock");

    if (fs.existsSync(resolvedLockPath)) {
      return this.parse(fs.readFileSync(resolvedLockPath, "utf8").toString());
    }

    return this.parse(this.generate([]));
  }

  generate(packages: IGenerate[]): string {
    var packageLock =
      "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# bunc lockfile v1\n";

    for (let packageData of packages) {
      const { name, version, resolved, integrity, dependencies } = packageData;

      if (name && version) {
        packageLock += `"${name}@^${version}"\n`;
      }

      if (version) {
        packageLock += `\tversion "${version}"\n`;
      }

      if (resolved) {
        packageLock += `\tresolved "${resolved}"\n`;
      }

      if (integrity) {
        packageLock += `\tintegrity "${integrity}"\n`;
      }

      if (dependencies) {
        const parsedData = parsedDependencies(JSON.stringify(dependencies));

        packageLock += `\tdependencies: \n\t\t${JSON.stringify(dependencies)}`;
      }

      packageLock += "\n\n\n";
    }

    return packageLock;
  }
}

export default lockManager;
